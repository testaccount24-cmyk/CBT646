/*REXX***********************************************************/
/* TSOPROC - V1.1                                               */
/*                                                              */
/*                                                              */
/* TSOPROC     Subroutine to Parse the TSO command operands     */
/*             based on a TSO CLISTlike PROC statement          */
/*                                                              */
/*      This routine does not attempt to exactly emulate the    */
/*      TSO CLIST parsing.  However, it provides an easy way for*/
/*      the EXEC writer to use TSO syntax for the command entry.*/
/*                                                              */
/*      Called as external subroutine                           */
/*                                                              */
/*                                                              */
/*      CALL TSOPROC String,Proc_stmt,key                       */
/*       String     - Command input to be parsed.   (required)  */
/*       Proc_stmt  - String containing a list of   (required)  */
/*                    positional paremeter and keywords         */
/*                    in the form of a CLIST PROC statement.    */
/*                    Keywords must be uppercase.               */
/*                                                              */
/*       Key        - Specific key to be processed. (optional)  */
/*                                                              */
/*    If the key is not included then all of the positional     */
/*    parameters and keywords from the "PROC" statement are     */
/*    processed.                                                */
/*                                                              */
/*    Returns: RESULT                                           */
/*      String containing REXX statements to set the            */
/*      variables corresponding to the PROC parameters.         */
/*      Normally processed with the REXX INTERPRET instruction. */
/*      If user enters:                                         */
/*        execname 'user1.a.list'                               */
/*      Then                                                    */
/*        CALL TSOPROC cmdinput,"PROC 1 DSN SYSOUT(A)"          */
/*        INTERPRET result                                      */
/*      Would set:                                              */
/*        dsn = "'USER1.A.LIST'";                               */
/*        sysout = "A"                                          */
/*                                                              */
/*    Variables set by the INTERPRET in addition to keywords    */
/*      rc = Return code                                        */
/*      tsoproc_msg =Error message when rc > 0                  */
/*      tsoproc_left= Unprocessed command input                 */
/*                                                              */
/* Example:                                                     */
/*                                                              */
/*     CLIST - PROC 1 P1 KEY1(60) LIST                          */
/*                                                              */
/* Typical calling sequence                                     */
/*                                                              */
/*     parse upper arg cmd_area                                 */
/*     proc_stmt = 'PROC 1 P1 KEY1(60) LIST  '                  */
/*     call   TSOPROC cmd_area,proc_stmt                        */
/*     interpret result                                         */
/*     if rc > 0 then                                           */
/*       do                                                     */
/*         say tsoproc_msg                                      */
/*         exit rc                                              */
/*       end                                                    */
/*     if list = 'LIST' then                                    */
/*       etc                                                    */
/*                                                              */
/*                                                              */
/* RC= 0  -  Processed successfully                             */
/*     4  -  Error - Key requires a value                       */
/*     8  -  Error - Value not allowed on KEYWORD               */
/*    12  -  Error - key( ) contains invalid data               */
/*    16  -  Error - No terminator for quoted string            */
/*           key('string') requires the ending "') "            */
/*    20  -  Invalid calling sequence to TSOPROC                */
/*    24  -  Unrecognized parameters entered by user            */
/*                                                              */
/*    If a specific key is passed as the 3rd parameter to       */
/*    TSOPROC, then error code 24 is not returned but the       */
/*    unprocessed input is in tsoproc_left.                     */
/*                                                              */
/*    For ... KEYWORD ...   returns    keyword = 'KEYWORD'      */
/*    For ... KEY(value)        -      key = 'value'            */
/*    For ... KEY('value')      -      key = "'value'"          */
/*    For ... KEY()             -      key = ''                 */
/*    For ...                   -      key = 'default'          */
/*                                                              */
/* Additional notes:                                            */
/*     If the user enters duplicate keywords then the           */
/*     last value is returned.                                  */
/*                                                              */
/*     No prompt is done for missing or invalid values          */
/*     The calling EXEC can, however, do prompting when         */
/*     rc is nonzero.                                           */
/*                                                              */
/*     Quoted strings do not require double quotes as in TSO    */
/*     CLISTS.  This is a feature not a bug!                    */
/*                                                              */
/*     If proc_stmt  = 'PROC 0 KEY1 KEY2()' then                */
/*       Key1 does not allow a value, and key2 requires a value.*/
/*                                                              */
/*     Positional parameters are not required.  EXEC may        */
/*     may check for null and prompt if desired.                */
/*                                                              */
/*     Comma or blanks are valid delimitors for keywords        */
/*     when entered by user.  PROC statement must use blanks.   */
/*--------------------------------------------------------------*/
/* Written Nov 1985, by John Thomas   (Almaden Research Center) */
/*                      JTHOMAS at ALMVSA                       */
/*V1.1 - 12/01/85 -Fix to accept comma as delimitor             */
/*--------------------------------------------------------------*/
TSOPROC:

  TRACE Off                        /* Do not trace subroutine   */
  rc = 0                           /* return code               */
  tsoproc_msg = ''                 /* error message area        */
  tsoproc_left = ''                /* remainder of  area        */
  tsoproc_cmd = ''                 /* REXX cmd to return to caller */
  arg_cnt = ARG()                  /* number of arguments passed */
  /*--------------------------------------------------*/
  /* verify valid number of parameters                */
  /*--------------------------------------------------*/
  if arg_cnt < 2 | arg_cnt > 3 then /* 2 or 3 arguments required */
    signal bad_input
  /*--------------------------------------------------*/
  /* verify valid PROC statement                      */
  /*--------------------------------------------------*/
  procstmt = arg(2)
  parse value procstmt with proc proc# operands
  if proc ¬= "PROC" | ,
     datatype(proc#) ¬= 'NUM' then
    do
      tsoproc_msg = 'TSOPROC - Invalid PROC statement'
      rc = 20
      signal tsoproc_exit
    end

  work_area = arg(1)" "            /* User input - add trailing blank*/

  /*--------------------------------------------------*/
  /* process a specific key if specified              */
  /*--------------------------------------------------*/
  if arg_cnt = 3 then              /*  if specific key passed*/
    do
      key = arg(3)
      parse value procstmt with proc proc# key_list
      keyvalue = KEYPARSE(work_area,key_list,key)
      if key_rc = 0 then
          tsoproc_cmd = tsoproc_cmd || key "=" quoted(keyvalue) ";"
      else
        do
          tsoproc_cmd = tsoproc_cmd || key "= '';"
          rc = key_rc
          tsoproc_msg = key_msg
        end
    end

  else      /* No specific key specified - Do them all */

    do
      /*--------------------------------------------------*/
      /* process the positional operands                  */
      /*--------------------------------------------------*/
      if proc# > 0 then /* if one or more positional parameters */
        do i = 1 to proc#
          parse value operands with pos operands
          pvalue = parsepos()
          tsoproc_cmd = tsoproc_cmd || pos "=" quoted(pvalue) ";"
        end

      /*--------------------------------------------------*/
      /* process the keyword operands                     */
      /*--------------------------------------------------*/
      key_list = operands /* save key word portion of PROC statement */
      key_area = work_area /* save key word portion of user input  */
      do while operands ¬= ''
        operands = strip(operands,"L")
        parse value operands with key1 keyrest1
        parse value key1" " with key2 "(" value ") " .
        key = key2
        operands = keyrest1
        keyvalue = KEYPARSE(key_area,key_list,key)
        if key_rc = 0 then
            tsoproc_cmd = tsoproc_cmd || key "=" quoted(keyvalue) ";"
        else
          do
            rc = key_rc
            tsoproc_msg = key_msg
            signal tsoproc_exit
          end
      end
    end

  tsoproc_left = key_area /*left over operands */

  if arg_cnt = 2 & ,   /* if processing complete PROC statement */
    key_area ¬= '' then   /*and unprocessed user input */
    do
      rc = 24
      tsoproc_msg = 'Invalid input parameter -' key_area
      signal tsoproc_exit
    end
tsoproc_exit:
  tsoproc_cmd = tsoproc_cmd || 'rc =' rc ';'
  tsoproc_cmd = tsoproc_cmd || 'TSOPROC_MSG = ' quoted(tsoproc_msg) ';'
  tsoproc_cmd = tsoproc_cmd || 'tsoproc_left = ' quoted(tsoproc_left) ';'
  return tsoproc_cmd
/* END OF PROCESSING */


bad_input:
  parse source opsys envir rest
  if envir ¬= 'SUBROUTINE' then
    do
      say "TSOPROC can only be called as an REXX EXEC subroutine."
      say "Refer to TSOPROC EXEC prolog for calling sequence.   "
      exit 20
    end
  else
    do
      say 'Invalid call to TSOPROC,  At least 2 arguments are required'
      tsoproc_msg = 'TSOPROC - Invalid call'
      rc = 20
      signal tsoproc_exit
    end
/*--------------------------------------------------------------*/
/*        S U B R O U T I N E S                                 */
/*--------------------------------------------------------------*/

/*--------------------------------------------------------------*/
/*Obtain the next positional parameter from the users cmd input */
/*input:  work_area - command input area                        */
/*returns: value of next positional parameter                   */
/*                                                              */
/*Modifies: work_area - the returned value is removed from it   */
/*--------------------------------------------------------------*/
parsepos:
    trace off
    work_area = strip(work_area,'L') /*remove leading blanks */
    delim = left(work_area,1)    /* check for ' or ( */
    if delim = "'" then          /* quoted string    */
      do
        parse value work_area with posvalue "' " work_area
        posvalue = posvalue"'"    /*add back the ending quote*/
      end;
    else
      if delim = "(" then        /* parenthasised string */
        do
          parse value work_area with posvalue ") " work_area
          posvalue = posvalue")"    /*add back the ending paren*/
        end;
      else
        parse value work_area with posvalue work_area
  return posvalue

/*--------------------------------------------------------------*/
/*quoted - build a valid string statement                       */
/*  Place ' or " around the string.                             */
/*  If necessary, double the ' and place ' around the string    */
/*--------------------------------------------------------------*/
quoted:
  trace off
  p1 = arg(1)
  if index(p1,"'") = 0 then        /* if no ' within string */
    p1 = "'"p1"'"                /* then use ' as delimitor */
  else
    if index(p1,'"') = 0 then      /* if no " within string */
      p1 = '"'p1'"'              /* then use " as delimitor */
    else
      do
        do i = 1 while(i < length(p1))  /*double up the 's */
          i = index(p1,"'",i)
          p1 = insert("'",p1,i)
          i = i + 2
        end
        p1 = "'"p1"'"       /* use ' as delimitor */
      end
  return p1
/*--------------------------------------------------------------*/
/*                                                              */
/* KEYPARSE    Subroutine to Parse for a keyword in the argument*/
/*                                                              */
/*     KEYPARSE(String,ListofKeys,key)                          */
/*       String - String to be parsed               (required)  */
/*       ListOfKeys - String containing a list of   (required)  */
/*                    blank-delimited keywords with             */
/*                    defaults. Keywords must be uppercase.     */
/*       Key    - Key to searched for               (required)  */
/*                                                              */
/*                                                              */
/*    Returns:                                                  */
/*      String containing key's value (or default if not found) */
/*    Exposed variables:                                        */
/*      key_rc    -  Return code                                */
/*      key_value -  Keyword's value                            */
/*      key_area  -  Input string with keyword deleted          */
/*      key_msg   -  Error message when key_rc > 0              */
/*                                                              */
/*                                                              */
/*    key_rc                                                    */
/*     0  -  Processed successfully                             */
/*     4  -  Error - Key requires a value                       */
/*     8  -  Error - Value not allowed on KEYWORD               */
/*    12  -  Error - key( ) contains invalid data               */
/*    16  -  Error - No terminator for quoted string            */
/*           key('string') requires the ending "') "            */
/*                                                              */
/*    If key_area is used in each call to keyparse for          */
/*    all of the valid keys, then key_area should end up null.  */
/*    key_area ¬= '' indicates unrecognized keywords.           */
/*                                                              */
/****************************************************************/
keyparse: procedure   expose key_rc key_area key_value key_msg

  TRACE off                        /* Do not trace subroutine        */
  wkarea = strip(arg(1))||" "      /* input string with 1 extra blank*/
  key_area = ''                    /* parsed area minus found keys */
  key_rc = 0                       /* return code              */
  key_msg = ''                     /* error message area       */
  key_list = arg(2)
  key = arg(3)                     /* full keyword */
  call get_defaults                /* sets min_abbrev, value_required*/
                                   /* and default key_value          */
/* debug
  say key min_abbrev value_required key_value
  trace r
   debug */
  do i = 1 by 1 while ( STRIP(wkarea) ¬= '' )
    if i > 255 then                  /* apparently in an endless loop*/
      exit 999
    /*----------------------------------------*/
    /* Process a simple keyword               */
    /*----------------------------------------*/
    if POS(",",wkarea) > 0 ,                       /*comma present */
     & POS(",",wkarea) < POS(" ",wkarea) then      /*as next delimitor*/
      dlm = ","
    else
      dlm = " "
    if  POS("(",wkarea) = 0 ,
     |  POS(dlm,wkarea) < POS("(",wkarea)  then /*simple keyword */
      do
        parse var wkarea word (dlm) wkarea
        if ( ABBREV(word,LEFT(key,min_abbrev)) ),
         & ( ABBREV(key,word,min_abbrev) ) then
          do
            if value_required = 'NO' then /*if no value expected   */
              key_value = key              /*-> returns KEYWORD */
            else                   /*This keyword requires a value */
              do
                key_rc = 4
                key_msg = 'TSOPROC - Key' key 'requires a value'
              end
          end
        else
          key_area =key_area||word||" " /* save the unknown key*/
        wkarea = STRIP(wkarea,'L')    /*strip leading blanks */
      end
    else
      /*----------------------------------------*/
      /* Process a keyword with (value)         */
      /*----------------------------------------*/
      if ( POS("('",wkarea) = 0 ),
       | ( POS("(",wkarea) < POS("('",wkarea) ) then /*unquoted string*/
        do
          if POS("),",wkarea) > 0 ,                 /*comma present */
           & POS("),",wkarea) < POS(") ",wkarea||") ") then
            dlm = "),"
          else
            dlm = ") "
          len = INDEX(wkarea,dlm) +1
          if len = 1 then            /*no trailing right paren*/
            len = length(wkarea)
          parse var wkarea word "(" value (dlm) rest
          if ( ABBREV(word,LEFT(key,min_abbrev)) ),
           & ( ABBREV(key,word,min_abbrev) ) then
            do
              key_value = value               /*-> returns key(value) */
              if value_required = 'NO' then /*if no value expected   */
                do
                  key_rc = 8
                  key_msg = 'TSOPROC - Value not allowed on keyword',
                            key
                end
              /* verify that no imbedded blanks or quotes          */
              if ( index(value," ") > 0 ) ,
               | ( index(value,"'") > 0 ) then
                do
                  key_rc = 12
                  key_msg = 'TSOPROC - Key' key 'contains invalid value'
                end
            end
          else
            key_area = key_area||LEFT(wkarea,len)
          wkarea = DELSTR(wkarea,1,len)
          wkarea = STRIP(wkarea,'L')    /*strip leading blanks */
        end
      else              /*quoted string processing */
        /*----------------------------------------*/
        /* Process a keyword with ('value')       */
        /*----------------------------------------*/
        do
          if POS("'),",wkarea) > 0 ,                 /*comma present */
           & POS("'),",wkarea) < POS("') ",wkarea||"') ") then
            dlm = "'),"
          else
            dlm = "') "
          len = INDEX(wkarea,dlm) +2
          parse value wkarea with word "('" value (dlm) rest
          if ( ABBREV(word,LEFT(key,min_abbrev)) ),
           & ( ABBREV(key,word,min_abbrev) ) then
            do
              key_value = "'"value"'"       /*return with quotes added*/
              if value_required = 'NO' then /*if no value expected   */
                do
                  key_rc = 8
                  key_msg = 'TSOPROC - Value not allowed on keyword',
                            key
                end
            end
          else
            key_area = key_area||LEFT(wkarea,len)||" "
          wkarea = DELSTR(wkarea,1,len)
          wkarea = STRIP(wkarea,'L')    /*strip leading blanks */
          if len = 2 then            /*no ending ')           */
            do
              key_rc = 16
              key_msg = 'TSOPROC - Operands contain quoted string'||,
                        ' with no ending delimitor'
            end
        end
  end
  key_area = STRIP(key_area)         /*remove leading/trailing blanks*/
  return key_value

/*--------------------------------------------------------------*/
/* Determine minimum abbreviation for key based on list of keys */
/* and obtain any default values                                */
/*--------------------------------------------------------------*/
get_defaults:
  min_abbrev = 1
  key_value = ''
  value_required = 'NO'
  operands = key_list
  do while operands ¬= ''
    operands = strip(operands,"L")
    parse value operands with key1 keyrest1
    parse value key1" " with key2 "(" value ") " .
    if key = key2 then             /* this is our keyword */
      if key2 = key1 then          /* if there was no () */
        value_required = 'NO'     /* indicate KEYWORD with no value*/
      else
        do
          value_required = 'YES'     /* Not a KEYWORD. ie. KEY(value) */
          key_value = value
        end
    else
      min_abbrev = max(min_abbrev,compare(key,key2) )
    operands = keyrest1
  end
  min_abbrev = min(length(key),min_abbrev)
  return
